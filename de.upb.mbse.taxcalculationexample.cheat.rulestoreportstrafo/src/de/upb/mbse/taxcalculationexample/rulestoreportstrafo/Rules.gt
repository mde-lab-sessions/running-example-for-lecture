import "platform:/resource/de.upb.mbse.taxcalculationexample.businessrules/model/Businessrules.ecore"
import "platform:/resource/de.upb.mbse.taxcalculationexample.reporting/model/Reporting.ecore"

rule calculationResultsToReportingJob {
	results: Berechnungslauf {
		-zustand -> state
	}

	state: Aus

	++ job: ReportingJob
}

rule clientToRecipient {
	client: Kunde

	job: ReportingJob {
		++ -recipients -> rec
	}

	++ rec: Recipient {
		.name := client.firstName
		.familyName := client.lastName
		++ -postalAddress -> address
	}

	++ address: Address
} when clientHasAtLeastOneDepot

condition clientHasAtLeastOneDepot = enforce clientHasDepot

pattern clientHasDepot {
	client : Kunde
	depot : Depot {
		-kunden->client
	} 
}

rule depotToReport {
	run:Berechnungslauf {
		-bank->bank
	}
	
	bank:Bank {
		-allDepots->depot
	}
	
	depot:Depot

	job:ReportingJob {
		++ -reports->rep
	}
	
	++ rep:Report {
		.footer := "Vorsitzender des Aufsichtsrats:  Charles Montgomery Plantagenet Schicklgruber Burns"
		.header := "BS:  The First Bank of Springfield"
	}
}

rule clientGetsReport {
	report:Report {
		++ -recipients->rec
	}
	
	rec:Recipient {
		.name == client.firstName
		.familyName == client.lastName
	}
	
	depot:Depot {
		-kunden->client
	}
	
	client:Kunde
}

rule applicationToEvent {
	application: Ausfuehrung {
		-umsatz->item
	}
	
	item:Umsatz
	
	depot:Depot {
		-anteile->a
	}
	
	a:Anteil {
		-fond->f
		-umsaetze->item
	}
	
	f: Fond

	job: ReportingJob {
		++ -events -> event
	}

	++ event: Event {
		.date := item.date
	}

	r: Report {
		++ -events -> event
	}
} when correctReportForDepo

condition correctReportForDepo = enforce haveCommonClient

pattern haveCommonClient {
	client:Kunde
	
	depot:Depot {
		-kunden->client
	}
	
	r:Report {
		-recipients->rec
	}
	
	rec:Recipient {
		.name == client.firstName
		.familyName == client.lastName
	}
}
